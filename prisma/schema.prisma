generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  image         String?
  passwordHash  String?
  role          Role     @default(USER)
  accounts      Account[]
  sessions      Session[]
  voiceSessions VoiceSession[]
  insights      Insight[]
  chartConfigs  ChartConfig[]
  auditLogs     AuditLog[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model VoiceSession {
  id             String   @id @default(cuid())
  userId         String
  agentId        String
  conversationId String
  status         String
  lastMessageAt  DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
}

model Insight {
  id        String   @id @default(cuid())
  userId    String
  source    String
  title     String
  payload   Json
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
}

model ChartConfig {
  id        String   @id @default(cuid())
  userId    String
  key       String
  config    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])
  @@unique([userId, key])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  event     String
  metadata  Json?
  createdAt DateTime @default(now())
  user User? @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user User @relation(fields: [userId], references: [id])
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}
